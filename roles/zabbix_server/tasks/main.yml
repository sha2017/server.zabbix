---
  - name: Download Zabbix 3.2
    yum: name=http://repo.zabbix.com/zabbix/3.0/rhel/7/x86_64/zabbix-release-3.0-1.el7.noarch.rpm state=present
    when: ansible_os_family == "RedHat"

  - name: "Debian | Installing repository Debian"
    apt_repository: repo="deb http://repo.zabbix.com/zabbix/3.0/debian/ {{ ansible_distribution_release }} main" state=present
    when: ansible_distribution == "Debian"

  - name: "Debian | Install gpg key"
    apt_key: id=79EA5ED4 url=http://repo.zabbix.com/zabbix-official-repo.key
    when: ansible_distribution == "Debian"

  - name: "Debian | Installing zabbix-server on a Debian eco system"
    apt: pkg={{item}} state=present update_cache=yes
    with_items:
      - zabbix-server-mysql
      - zabbix-frontend-php
      - zabbix-agent
      - php5-mysql
      - python-psycopg2 #Ansible dependency package
      - mysql-client
      - python-mysqldb
    when: ansible_distribution == "Debian"

  - name: Install Zabbix server packages
    yum: name={{item}} state=present
    with_items:
      - zabbix-server-mysql
      - zabbix-agent
      - zabbix-web-mysql
    when: ansible_os_family == "RedHat"

  - name: Defining Zabbix Database password
    lineinfile: dest=/etc/zabbix/zabbix_server.conf regexp="^# DBPassword=" insertafter="^# DBPassword=" line="DBPassword={{zabbix_db_pass}}" backup=yes backrefs=yes

  - name: Defining Zabbix mysql hosts
    lineinfile: dest=/etc/zabbix/zabbix_server.conf regexp="^# DBHost=localhost" insertafter="^# DBHost=localhost" line="DBHost={{zabbix_db_srv}}" backup=yes backrefs=yes

  - name: Defining Zabbix mysql user
    lineinfile: dest=/etc/zabbix/zabbix_server.conf regexp="^DBUser=" insertafter="^DBUser=" line="DBUser={{zabbix_db_user}}" backup=yes backrefs=yes

  - name: Defining Zabbix External scripts
    lineinfile: dest=/etc/zabbix/zabbix_server.conf regexp="^#/usr/lib/zabbix/externalscripts" insertafter="^/usr/lib/zabbix/externalscripts" line="{{zabbix_externalscripts}}" backup=yes backrefs=yes

  - name: Add Ansible warning txt block
    lineinfile: dest=/etc/zabbix/zabbix_server.conf
                regexp='# This'
                insertbefore=BOF
                line='#!!!This is an Ansible managed file!!!!'
                backrefs=yes

  - name: Remove zabbix.conf from /etc/httd/conf.d/zabbix.conf.
    file: path=/etc/httpd/conf.d/zabbix.conf state=absent
    when: ansible_os_family == "RedHat"

  - name: Create externalscripts directory for Debian
    file: path=/etc/zabbix/zabbix_agentd.d owner=root group=root mode=0755 state=directory
    when: ansible_os_family == "Debian"

  - name: Uploading custom scripts (see files in role)
    copy: src={{item}} dest={{zabbix_externalscripts}}/{{item}} owner=root group=root mode=0755
    with_items:
      - zext_ssl_cert.sh
    when: ansible_os_family == "RedHat"

  - name: Uploading .my.cnf file for mysql monitoring (see files in role)
    template: src=.my.cnf.j2 dest=/etc/zabbix/.my.cnf owner=root group=root mode=0600

  - name: Upload files to zabbix_agent of hypervisor (see files in role)
    copy: src={{item}} dest=/etc/zabbix/zabbix_agentd.d/{{item}} owner=root group=root mode=0644
    with_items:
    - userparameter_mysql.conf

  - name: Create database {{zabbix_db_name}} for user {{zabbix_db_name}}
    mysql_db: name={{zabbix_db_name}} state=present
    when: ansible_os_family == "Debian" and database_create

  - name: Managing database users
    mysql_user: name={{zabbix_db_user}} host={{zabbix_db_srv}}  priv="{{zabbix_db_name}}.*:all" state=present
    when: "{{database_create}}"

  - name: Importing Zabbix database. Onetime only shot
    mysql_db: name={{zabbix_db_name}} state=import target=/usr/share/doc/zabbix-server-mysql/create.sql.gz
    when: database_first_import is defined and "{{database_first_import}}" and ansible_os_family == "Debian"

  - name: Importing Zabbix database. Onetime only shot
    mysql_db: name={{zabbix_db_name}} state=import target=/usr/share/doc/zabbix-server-mysql-3.0.3/create.sql.gz
    when: database_first_import is defined and "{{database_first_import}}" and ansible_os_family == "Redhat"

  - name: PHP Setting timezone to {{timezone}}
    lineinfile: dest=/etc/php.ini regexp="date.timezone" insertafter="^; date.timezone" line="date.timezone = {{timezone}}" backrefs=yes backup=yes
    when: ansible_os_family == "RedHat"

  - name: PHP Setting timezone to {{timezone}}
    lineinfile: dest=/etc/php5/apache2/php.ini regexp="date.timezone" insertafter="^; date.timezone" line="date.timezone = {{timezone}}" backrefs=yes backup=yes
    when: ansible_os_family == "Debian"

  - name: PHP Setting Max execution time {{max_execution_time}}
    lineinfile: dest=/etc/php.ini regexp="max_execution_time = " insertafter="^max_execution_time = " line="max_execution_time = {{max_execution_time}}" backrefs=yes backup=yes
    when: ansible_os_family == "RedHat"

  - name: PHP Setting Max execution time {{max_execution_time}}
    lineinfile: dest=/etc/php5/apache2/php.ini regexp="max_execution_time = " insertafter="^max_execution_time = " line="max_execution_time = {{max_execution_time}}" backrefs=yes backup=yes
    when: ansible_os_family == "Debian"

  - name: PHP Setting input time to {{max_input_time}}
    lineinfile: dest=/etc/php.ini regexp="max_input_time = " insertafter="^max_input_time = " line="max_input_time = {{max_input_time}}" backrefs=yes backup=yes
    when: ansible_os_family == "RedHat"

  - name: PHP Setting input time to {{max_input_time}}
    lineinfile: dest=/etc/php5/apache2/php.ini regexp="max_input_time = " insertafter="^max_input_time = " line="max_input_time = {{max_input_time}}" backrefs=yes backup=yes
    when: ansible_os_family == "Debian"

  - name: Set upload_max_files size to {{upload_max_filesize}}
    lineinfile: dest=/etc/php.ini regexp="upload_max_filesize = " insertafter="^;upload_max_filesize" line="upload_max_filesize = {{upload_max_filesize}}" backrefs="yes" backup=yes
    when: ansible_os_family == "RedHat"

  - name: Set upload_max_files size to {{upload_max_filesize}}
    lineinfile: dest=/etc/php5/apache2/php.ini regexp="upload_max_filesize = " insertafter="^;upload_max_filesize" line="upload_max_filesize = {{upload_max_filesize}}" backrefs="yes" backup=yes
    when: ansible_os_family == "Debian"

  - name: Set post_max_size to {{post_max_size}}
    lineinfile: dest=/etc/php.ini regexp="post_max_size" insertafter="^;post_max_size" line="post_max_size = {{post_max_size}}" backrefs="yes" backup=yes
    when: ansible_os_family == "RedHat"

  - name: Set post_max_size to {{post_max_size}}
    lineinfile: dest=/etc/php5/apache2/php.ini regexp="post_max_size" insertafter="^;post_max_size" line="post_max_size = {{post_max_size}}" backrefs="yes" backup=yes
    when: ansible_os_family == "Debian"

  - name: Enabling Zabbix server
    service: name=zabbix-server state=started enabled=yes

  - name: Enabling Zabbix agent
    service: name=zabbix-agent state=started enabled=yes

  - debug: msg="Remember for a new zabbix server to import an sql file. you can do this be defining an extra var at playbook execution --extra-vars='database_first_import=true'"
